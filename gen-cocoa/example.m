/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "example.h"

@implementation Complex

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReal: (int) real imaginary: (int) imaginary
{
  self = [super init];
  __real = real;
  __real_isset = YES;
  __imaginary = imaginary;
  __imaginary_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"real"])
  {
    __real = [decoder decodeInt64ForKey: @"real"];
    __real_isset = YES;
  }
  if ([decoder containsValueForKey: @"imaginary"])
  {
    __imaginary = [decoder decodeInt64ForKey: @"imaginary"];
    __imaginary_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__real_isset)
  {
    [encoder encodeInt64: __real forKey: @"real"];
  }
  if (__imaginary_isset)
  {
    [encoder encodeInt64: __imaginary forKey: @"imaginary"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int64_t) real {
  return __real;
}

- (void) setReal: (int64_t) real {
  __real = real;
  __real_isset = YES;
}

- (BOOL) realIsSet {
  return __real_isset;
}

- (void) unsetReal {
  __real_isset = NO;
}

- (int64_t) imaginary {
  return __imaginary;
}

- (void) setImaginary: (int64_t) imaginary {
  __imaginary = imaginary;
  __imaginary_isset = YES;
}

- (BOOL) imaginaryIsSet {
  return __imaginary_isset;
}

- (void) unsetImaginary {
  __imaginary_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setReal: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setImaginary: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Complex"];
  if (__real_isset) {
    [outProtocol writeFieldBeginWithName: @"real" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __real];
    [outProtocol writeFieldEnd];
  }
  if (__imaginary_isset) {
    [outProtocol writeFieldBeginWithName: @"imaginary" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __imaginary];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Complex("];
  [ms appendString: @"real:"];
  [ms appendFormat: @"%qi", __real];
  [ms appendString: @",imaginary:"];
  [ms appendFormat: @"%qi", __imaginary];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ZeroDivisionException

- (id) init
{
  return [super initWithName: @"ZeroDivisionException" reason: @"unknown" userInfo: nil];
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ZeroDivisionException"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ZeroDivisionException("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation exampleConstants
+ (void) initialize {
}
@end

@interface add_args : NSObject <TBase, NSCoding> {
  Complex * __i1;
  Complex * __i2;

  BOOL __i1_isset;
  BOOL __i2_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=i1, setter=setI1:) Complex * i1;
@property (nonatomic, retain, getter=i2, setter=setI2:) Complex * i2;
#endif

- (id) init;
- (id) initWithI1: (Complex *) i1 i2: (Complex *) i2;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Complex *) i1;
- (void) setI1: (Complex *) i1;
#endif
- (BOOL) i1IsSet;

#if !__has_feature(objc_arc)
- (Complex *) i2;
- (void) setI2: (Complex *) i2;
#endif
- (BOOL) i2IsSet;

@end

@implementation add_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithI1: (Complex *) i1 i2: (Complex *) i2
{
  self = [super init];
  __i1 = [i1 retain_stub];
  __i1_isset = YES;
  __i2 = [i2 retain_stub];
  __i2_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"i1"])
  {
    __i1 = [[decoder decodeObjectForKey: @"i1"] retain_stub];
    __i1_isset = YES;
  }
  if ([decoder containsValueForKey: @"i2"])
  {
    __i2 = [[decoder decodeObjectForKey: @"i2"] retain_stub];
    __i2_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__i1_isset)
  {
    [encoder encodeObject: __i1 forKey: @"i1"];
  }
  if (__i2_isset)
  {
    [encoder encodeObject: __i2 forKey: @"i2"];
  }
}

- (void) dealloc
{
  [__i1 release_stub];
  [__i2 release_stub];
  [super dealloc_stub];
}

- (Complex *) i1 {
  return [[__i1 retain_stub] autorelease_stub];
}

- (void) setI1: (Complex *) i1 {
  [i1 retain_stub];
  [__i1 release_stub];
  __i1 = i1;
  __i1_isset = YES;
}

- (BOOL) i1IsSet {
  return __i1_isset;
}

- (void) unsetI1 {
  [__i1 release_stub];
  __i1 = nil;
  __i1_isset = NO;
}

- (Complex *) i2 {
  return [[__i2 retain_stub] autorelease_stub];
}

- (void) setI2: (Complex *) i2 {
  [i2 retain_stub];
  [__i2 release_stub];
  __i2 = i2;
  __i2_isset = YES;
}

- (BOOL) i2IsSet {
  return __i2_isset;
}

- (void) unsetI2 {
  [__i2 release_stub];
  __i2 = nil;
  __i2_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Complex *fieldValue = [[Complex alloc] init];
          [fieldValue read: inProtocol];
          [self setI1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Complex *fieldValue = [[Complex alloc] init];
          [fieldValue read: inProtocol];
          [self setI2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"add_args"];
  if (__i1_isset) {
    if (__i1 != nil) {
      [outProtocol writeFieldBeginWithName: @"i1" type: TType_STRUCT fieldID: 1];
      [__i1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__i2_isset) {
    if (__i2 != nil) {
      [outProtocol writeFieldBeginWithName: @"i2" type: TType_STRUCT fieldID: 2];
      [__i2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"add_args("];
  [ms appendString: @"i1:"];
  [ms appendFormat: @"%@", __i1];
  [ms appendString: @",i2:"];
  [ms appendFormat: @"%@", __i2];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Add_result : NSObject <TBase, NSCoding> {
  Complex * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Complex * success;
#endif

- (id) init;
- (id) initWithSuccess: (Complex *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Complex *) success;
- (void) setSuccess: (Complex *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Add_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Complex *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Complex *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Complex *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Complex *fieldValue = [[Complex alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Add_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Add_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface subtract_args : NSObject <TBase, NSCoding> {
  Complex * __i1;
  Complex * __i2;

  BOOL __i1_isset;
  BOOL __i2_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=i1, setter=setI1:) Complex * i1;
@property (nonatomic, retain, getter=i2, setter=setI2:) Complex * i2;
#endif

- (id) init;
- (id) initWithI1: (Complex *) i1 i2: (Complex *) i2;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Complex *) i1;
- (void) setI1: (Complex *) i1;
#endif
- (BOOL) i1IsSet;

#if !__has_feature(objc_arc)
- (Complex *) i2;
- (void) setI2: (Complex *) i2;
#endif
- (BOOL) i2IsSet;

@end

@implementation subtract_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithI1: (Complex *) i1 i2: (Complex *) i2
{
  self = [super init];
  __i1 = [i1 retain_stub];
  __i1_isset = YES;
  __i2 = [i2 retain_stub];
  __i2_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"i1"])
  {
    __i1 = [[decoder decodeObjectForKey: @"i1"] retain_stub];
    __i1_isset = YES;
  }
  if ([decoder containsValueForKey: @"i2"])
  {
    __i2 = [[decoder decodeObjectForKey: @"i2"] retain_stub];
    __i2_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__i1_isset)
  {
    [encoder encodeObject: __i1 forKey: @"i1"];
  }
  if (__i2_isset)
  {
    [encoder encodeObject: __i2 forKey: @"i2"];
  }
}

- (void) dealloc
{
  [__i1 release_stub];
  [__i2 release_stub];
  [super dealloc_stub];
}

- (Complex *) i1 {
  return [[__i1 retain_stub] autorelease_stub];
}

- (void) setI1: (Complex *) i1 {
  [i1 retain_stub];
  [__i1 release_stub];
  __i1 = i1;
  __i1_isset = YES;
}

- (BOOL) i1IsSet {
  return __i1_isset;
}

- (void) unsetI1 {
  [__i1 release_stub];
  __i1 = nil;
  __i1_isset = NO;
}

- (Complex *) i2 {
  return [[__i2 retain_stub] autorelease_stub];
}

- (void) setI2: (Complex *) i2 {
  [i2 retain_stub];
  [__i2 release_stub];
  __i2 = i2;
  __i2_isset = YES;
}

- (BOOL) i2IsSet {
  return __i2_isset;
}

- (void) unsetI2 {
  [__i2 release_stub];
  __i2 = nil;
  __i2_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Complex *fieldValue = [[Complex alloc] init];
          [fieldValue read: inProtocol];
          [self setI1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Complex *fieldValue = [[Complex alloc] init];
          [fieldValue read: inProtocol];
          [self setI2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"subtract_args"];
  if (__i1_isset) {
    if (__i1 != nil) {
      [outProtocol writeFieldBeginWithName: @"i1" type: TType_STRUCT fieldID: 1];
      [__i1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__i2_isset) {
    if (__i2 != nil) {
      [outProtocol writeFieldBeginWithName: @"i2" type: TType_STRUCT fieldID: 2];
      [__i2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"subtract_args("];
  [ms appendString: @"i1:"];
  [ms appendFormat: @"%@", __i1];
  [ms appendString: @",i2:"];
  [ms appendFormat: @"%@", __i2];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Subtract_result : NSObject <TBase, NSCoding> {
  Complex * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Complex * success;
#endif

- (id) init;
- (id) initWithSuccess: (Complex *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Complex *) success;
- (void) setSuccess: (Complex *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Subtract_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Complex *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Complex *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Complex *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Complex *fieldValue = [[Complex alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Subtract_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Subtract_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface multiply_args : NSObject <TBase, NSCoding> {
  Complex * __i1;
  Complex * __i2;

  BOOL __i1_isset;
  BOOL __i2_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=i1, setter=setI1:) Complex * i1;
@property (nonatomic, retain, getter=i2, setter=setI2:) Complex * i2;
#endif

- (id) init;
- (id) initWithI1: (Complex *) i1 i2: (Complex *) i2;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Complex *) i1;
- (void) setI1: (Complex *) i1;
#endif
- (BOOL) i1IsSet;

#if !__has_feature(objc_arc)
- (Complex *) i2;
- (void) setI2: (Complex *) i2;
#endif
- (BOOL) i2IsSet;

@end

@implementation multiply_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithI1: (Complex *) i1 i2: (Complex *) i2
{
  self = [super init];
  __i1 = [i1 retain_stub];
  __i1_isset = YES;
  __i2 = [i2 retain_stub];
  __i2_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"i1"])
  {
    __i1 = [[decoder decodeObjectForKey: @"i1"] retain_stub];
    __i1_isset = YES;
  }
  if ([decoder containsValueForKey: @"i2"])
  {
    __i2 = [[decoder decodeObjectForKey: @"i2"] retain_stub];
    __i2_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__i1_isset)
  {
    [encoder encodeObject: __i1 forKey: @"i1"];
  }
  if (__i2_isset)
  {
    [encoder encodeObject: __i2 forKey: @"i2"];
  }
}

- (void) dealloc
{
  [__i1 release_stub];
  [__i2 release_stub];
  [super dealloc_stub];
}

- (Complex *) i1 {
  return [[__i1 retain_stub] autorelease_stub];
}

- (void) setI1: (Complex *) i1 {
  [i1 retain_stub];
  [__i1 release_stub];
  __i1 = i1;
  __i1_isset = YES;
}

- (BOOL) i1IsSet {
  return __i1_isset;
}

- (void) unsetI1 {
  [__i1 release_stub];
  __i1 = nil;
  __i1_isset = NO;
}

- (Complex *) i2 {
  return [[__i2 retain_stub] autorelease_stub];
}

- (void) setI2: (Complex *) i2 {
  [i2 retain_stub];
  [__i2 release_stub];
  __i2 = i2;
  __i2_isset = YES;
}

- (BOOL) i2IsSet {
  return __i2_isset;
}

- (void) unsetI2 {
  [__i2 release_stub];
  __i2 = nil;
  __i2_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Complex *fieldValue = [[Complex alloc] init];
          [fieldValue read: inProtocol];
          [self setI1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Complex *fieldValue = [[Complex alloc] init];
          [fieldValue read: inProtocol];
          [self setI2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"multiply_args"];
  if (__i1_isset) {
    if (__i1 != nil) {
      [outProtocol writeFieldBeginWithName: @"i1" type: TType_STRUCT fieldID: 1];
      [__i1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__i2_isset) {
    if (__i2 != nil) {
      [outProtocol writeFieldBeginWithName: @"i2" type: TType_STRUCT fieldID: 2];
      [__i2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"multiply_args("];
  [ms appendString: @"i1:"];
  [ms appendFormat: @"%@", __i1];
  [ms appendString: @",i2:"];
  [ms appendFormat: @"%@", __i2];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Multiply_result : NSObject <TBase, NSCoding> {
  Complex * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Complex * success;
#endif

- (id) init;
- (id) initWithSuccess: (Complex *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Complex *) success;
- (void) setSuccess: (Complex *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Multiply_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Complex *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Complex *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Complex *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Complex *fieldValue = [[Complex alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Multiply_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Multiply_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface divide_args : NSObject <TBase, NSCoding> {
  Complex * __i1;
  Complex * __i2;

  BOOL __i1_isset;
  BOOL __i2_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=i1, setter=setI1:) Complex * i1;
@property (nonatomic, retain, getter=i2, setter=setI2:) Complex * i2;
#endif

- (id) init;
- (id) initWithI1: (Complex *) i1 i2: (Complex *) i2;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Complex *) i1;
- (void) setI1: (Complex *) i1;
#endif
- (BOOL) i1IsSet;

#if !__has_feature(objc_arc)
- (Complex *) i2;
- (void) setI2: (Complex *) i2;
#endif
- (BOOL) i2IsSet;

@end

@implementation divide_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithI1: (Complex *) i1 i2: (Complex *) i2
{
  self = [super init];
  __i1 = [i1 retain_stub];
  __i1_isset = YES;
  __i2 = [i2 retain_stub];
  __i2_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"i1"])
  {
    __i1 = [[decoder decodeObjectForKey: @"i1"] retain_stub];
    __i1_isset = YES;
  }
  if ([decoder containsValueForKey: @"i2"])
  {
    __i2 = [[decoder decodeObjectForKey: @"i2"] retain_stub];
    __i2_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__i1_isset)
  {
    [encoder encodeObject: __i1 forKey: @"i1"];
  }
  if (__i2_isset)
  {
    [encoder encodeObject: __i2 forKey: @"i2"];
  }
}

- (void) dealloc
{
  [__i1 release_stub];
  [__i2 release_stub];
  [super dealloc_stub];
}

- (Complex *) i1 {
  return [[__i1 retain_stub] autorelease_stub];
}

- (void) setI1: (Complex *) i1 {
  [i1 retain_stub];
  [__i1 release_stub];
  __i1 = i1;
  __i1_isset = YES;
}

- (BOOL) i1IsSet {
  return __i1_isset;
}

- (void) unsetI1 {
  [__i1 release_stub];
  __i1 = nil;
  __i1_isset = NO;
}

- (Complex *) i2 {
  return [[__i2 retain_stub] autorelease_stub];
}

- (void) setI2: (Complex *) i2 {
  [i2 retain_stub];
  [__i2 release_stub];
  __i2 = i2;
  __i2_isset = YES;
}

- (BOOL) i2IsSet {
  return __i2_isset;
}

- (void) unsetI2 {
  [__i2 release_stub];
  __i2 = nil;
  __i2_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Complex *fieldValue = [[Complex alloc] init];
          [fieldValue read: inProtocol];
          [self setI1: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Complex *fieldValue = [[Complex alloc] init];
          [fieldValue read: inProtocol];
          [self setI2: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"divide_args"];
  if (__i1_isset) {
    if (__i1 != nil) {
      [outProtocol writeFieldBeginWithName: @"i1" type: TType_STRUCT fieldID: 1];
      [__i1 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__i2_isset) {
    if (__i2 != nil) {
      [outProtocol writeFieldBeginWithName: @"i2" type: TType_STRUCT fieldID: 2];
      [__i2 write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"divide_args("];
  [ms appendString: @"i1:"];
  [ms appendFormat: @"%@", __i1];
  [ms appendString: @",i2:"];
  [ms appendFormat: @"%@", __i2];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Divide_result : NSObject <TBase, NSCoding> {
  Complex * __success;
  ZeroDivisionException * __ex;

  BOOL __success_isset;
  BOOL __ex_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Complex * success;
@property (nonatomic, retain, getter=ex, setter=setEx:) ZeroDivisionException * ex;
#endif

- (id) init;
- (id) initWithSuccess: (Complex *) success ex: (ZeroDivisionException *) ex;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Complex *) success;
- (void) setSuccess: (Complex *) success;
#endif
- (BOOL) successIsSet;

#if !__has_feature(objc_arc)
- (ZeroDivisionException *) ex;
- (void) setEx: (ZeroDivisionException *) ex;
#endif
- (BOOL) exIsSet;

@end

@implementation Divide_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Complex *) success ex: (ZeroDivisionException *) ex
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  __ex = [ex retain_stub];
  __ex_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"ex"])
  {
    __ex = [[decoder decodeObjectForKey: @"ex"] retain_stub];
    __ex_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__ex_isset)
  {
    [encoder encodeObject: __ex forKey: @"ex"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [__ex release_stub];
  [super dealloc_stub];
}

- (Complex *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Complex *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (ZeroDivisionException *) ex {
  return [[__ex retain_stub] autorelease_stub];
}

- (void) setEx: (ZeroDivisionException *) ex {
  [ex retain_stub];
  [__ex release_stub];
  __ex = ex;
  __ex_isset = YES;
}

- (BOOL) exIsSet {
  return __ex_isset;
}

- (void) unsetEx {
  [__ex release_stub];
  __ex = nil;
  __ex_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Complex *fieldValue = [[Complex alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          ZeroDivisionException *fieldValue = [[ZeroDivisionException alloc] init];
          [fieldValue read: inProtocol];
          [self setEx: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Divide_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__ex_isset) {
    if (__ex != nil) {
      [outProtocol writeFieldBeginWithName: @"ex" type: TType_STRUCT fieldID: 1];
      [__ex write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Divide_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",ex:"];
  [ms appendFormat: @"%@", __ex];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ArithmeticServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_add: (Complex *) i1 i2: (Complex *) i2
{
  [outProtocol writeMessageBeginWithName: @"add" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"add_args"];
  if (i1 != nil)  {
    [outProtocol writeFieldBeginWithName: @"i1" type: TType_STRUCT fieldID: 1];
    [i1 write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (i2 != nil)  {
    [outProtocol writeFieldBeginWithName: @"i2" type: TType_STRUCT fieldID: 2];
    [i2 write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Complex *) recv_add
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Add_result * result = [[[Add_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"add failed: unknown result"];
}

- (Complex *) add: (Complex *) i1 i2: (Complex *) i2
{
  [self send_add : i1 i2: i2];
  return [self recv_add];
}

- (void) send_subtract: (Complex *) i1 i2: (Complex *) i2
{
  [outProtocol writeMessageBeginWithName: @"subtract" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"subtract_args"];
  if (i1 != nil)  {
    [outProtocol writeFieldBeginWithName: @"i1" type: TType_STRUCT fieldID: 1];
    [i1 write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (i2 != nil)  {
    [outProtocol writeFieldBeginWithName: @"i2" type: TType_STRUCT fieldID: 2];
    [i2 write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Complex *) recv_subtract
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Subtract_result * result = [[[Subtract_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"subtract failed: unknown result"];
}

- (Complex *) subtract: (Complex *) i1 i2: (Complex *) i2
{
  [self send_subtract : i1 i2: i2];
  return [self recv_subtract];
}

- (void) send_multiply: (Complex *) i1 i2: (Complex *) i2
{
  [outProtocol writeMessageBeginWithName: @"multiply" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"multiply_args"];
  if (i1 != nil)  {
    [outProtocol writeFieldBeginWithName: @"i1" type: TType_STRUCT fieldID: 1];
    [i1 write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (i2 != nil)  {
    [outProtocol writeFieldBeginWithName: @"i2" type: TType_STRUCT fieldID: 2];
    [i2 write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Complex *) recv_multiply
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Multiply_result * result = [[[Multiply_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"multiply failed: unknown result"];
}

- (Complex *) multiply: (Complex *) i1 i2: (Complex *) i2
{
  [self send_multiply : i1 i2: i2];
  return [self recv_multiply];
}

- (void) send_divide: (Complex *) i1 i2: (Complex *) i2
{
  [outProtocol writeMessageBeginWithName: @"divide" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"divide_args"];
  if (i1 != nil)  {
    [outProtocol writeFieldBeginWithName: @"i1" type: TType_STRUCT fieldID: 1];
    [i1 write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (i2 != nil)  {
    [outProtocol writeFieldBeginWithName: @"i2" type: TType_STRUCT fieldID: 2];
    [i2 write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Complex *) recv_divide
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Divide_result * result = [[[Divide_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result exIsSet]) {
    @throw [result ex];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"divide failed: unknown result"];
}

- (Complex *) divide: (Complex *) i1 i2: (Complex *) i2
{
  [self send_divide : i1 i2: i2];
  return [self recv_divide];
}

@end

@implementation ArithmeticServiceProcessor

- (id) initWithArithmeticService: (id <ArithmeticService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_add_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"add"];
  }
  {
    SEL s = @selector(process_subtract_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"subtract"];
  }
  {
    SEL s = @selector(process_multiply_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"multiply"];
  }
  {
    SEL s = @selector(process_divide_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"divide"];
  }
  return self;
}

- (id<ArithmeticService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_add_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  add_args * args = [[add_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Add_result * result = [[Add_result alloc] init];
  [result setSuccess: [mService add: [args i1] i2: [args i2]]];
  [outProtocol writeMessageBeginWithName: @"add"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_subtract_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  subtract_args * args = [[subtract_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Subtract_result * result = [[Subtract_result alloc] init];
  [result setSuccess: [mService subtract: [args i1] i2: [args i2]]];
  [outProtocol writeMessageBeginWithName: @"subtract"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_multiply_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  multiply_args * args = [[multiply_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Multiply_result * result = [[Multiply_result alloc] init];
  [result setSuccess: [mService multiply: [args i1] i2: [args i2]]];
  [outProtocol writeMessageBeginWithName: @"multiply"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_divide_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  divide_args * args = [[divide_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Divide_result * result = [[Divide_result alloc] init];
  [result setSuccess: [mService divide: [args i1] i2: [args i2]]];
  [outProtocol writeMessageBeginWithName: @"divide"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

