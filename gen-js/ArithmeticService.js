//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ArithmeticService_add_args = function(args) {
  this.i1 = null;
  this.i2 = null;
  if (args) {
    if (args.i1 !== undefined) {
      this.i1 = args.i1;
    }
    if (args.i2 !== undefined) {
      this.i2 = args.i2;
    }
  }
};
ArithmeticService_add_args.prototype = {};
ArithmeticService_add_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.i1 = new Complex();
        this.i1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.i2 = new Complex();
        this.i2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArithmeticService_add_args.prototype.write = function(output) {
  output.writeStructBegin('ArithmeticService_add_args');
  if (this.i1 !== null && this.i1 !== undefined) {
    output.writeFieldBegin('i1', Thrift.Type.STRUCT, 1);
    this.i1.write(output);
    output.writeFieldEnd();
  }
  if (this.i2 !== null && this.i2 !== undefined) {
    output.writeFieldBegin('i2', Thrift.Type.STRUCT, 2);
    this.i2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ArithmeticService_add_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ArithmeticService_add_result.prototype = {};
ArithmeticService_add_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Complex();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArithmeticService_add_result.prototype.write = function(output) {
  output.writeStructBegin('ArithmeticService_add_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ArithmeticService_subtract_args = function(args) {
  this.i1 = null;
  this.i2 = null;
  if (args) {
    if (args.i1 !== undefined) {
      this.i1 = args.i1;
    }
    if (args.i2 !== undefined) {
      this.i2 = args.i2;
    }
  }
};
ArithmeticService_subtract_args.prototype = {};
ArithmeticService_subtract_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.i1 = new Complex();
        this.i1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.i2 = new Complex();
        this.i2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArithmeticService_subtract_args.prototype.write = function(output) {
  output.writeStructBegin('ArithmeticService_subtract_args');
  if (this.i1 !== null && this.i1 !== undefined) {
    output.writeFieldBegin('i1', Thrift.Type.STRUCT, 1);
    this.i1.write(output);
    output.writeFieldEnd();
  }
  if (this.i2 !== null && this.i2 !== undefined) {
    output.writeFieldBegin('i2', Thrift.Type.STRUCT, 2);
    this.i2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ArithmeticService_subtract_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ArithmeticService_subtract_result.prototype = {};
ArithmeticService_subtract_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Complex();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArithmeticService_subtract_result.prototype.write = function(output) {
  output.writeStructBegin('ArithmeticService_subtract_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ArithmeticService_multiply_args = function(args) {
  this.i1 = null;
  this.i2 = null;
  if (args) {
    if (args.i1 !== undefined) {
      this.i1 = args.i1;
    }
    if (args.i2 !== undefined) {
      this.i2 = args.i2;
    }
  }
};
ArithmeticService_multiply_args.prototype = {};
ArithmeticService_multiply_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.i1 = new Complex();
        this.i1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.i2 = new Complex();
        this.i2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArithmeticService_multiply_args.prototype.write = function(output) {
  output.writeStructBegin('ArithmeticService_multiply_args');
  if (this.i1 !== null && this.i1 !== undefined) {
    output.writeFieldBegin('i1', Thrift.Type.STRUCT, 1);
    this.i1.write(output);
    output.writeFieldEnd();
  }
  if (this.i2 !== null && this.i2 !== undefined) {
    output.writeFieldBegin('i2', Thrift.Type.STRUCT, 2);
    this.i2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ArithmeticService_multiply_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ArithmeticService_multiply_result.prototype = {};
ArithmeticService_multiply_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Complex();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArithmeticService_multiply_result.prototype.write = function(output) {
  output.writeStructBegin('ArithmeticService_multiply_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ArithmeticService_divide_args = function(args) {
  this.i1 = null;
  this.i2 = null;
  if (args) {
    if (args.i1 !== undefined) {
      this.i1 = args.i1;
    }
    if (args.i2 !== undefined) {
      this.i2 = args.i2;
    }
  }
};
ArithmeticService_divide_args.prototype = {};
ArithmeticService_divide_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.i1 = new Complex();
        this.i1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.i2 = new Complex();
        this.i2.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArithmeticService_divide_args.prototype.write = function(output) {
  output.writeStructBegin('ArithmeticService_divide_args');
  if (this.i1 !== null && this.i1 !== undefined) {
    output.writeFieldBegin('i1', Thrift.Type.STRUCT, 1);
    this.i1.write(output);
    output.writeFieldEnd();
  }
  if (this.i2 !== null && this.i2 !== undefined) {
    output.writeFieldBegin('i2', Thrift.Type.STRUCT, 2);
    this.i2.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ArithmeticService_divide_result = function(args) {
  this.success = null;
  this.ex = null;
  if (args instanceof ZeroDivisionException) {
    this.ex = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.ex !== undefined) {
      this.ex = args.ex;
    }
  }
};
ArithmeticService_divide_result.prototype = {};
ArithmeticService_divide_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Complex();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ex = new ZeroDivisionException();
        this.ex.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ArithmeticService_divide_result.prototype.write = function(output) {
  output.writeStructBegin('ArithmeticService_divide_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ex !== null && this.ex !== undefined) {
    output.writeFieldBegin('ex', Thrift.Type.STRUCT, 1);
    this.ex.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ArithmeticServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ArithmeticServiceClient.prototype = {};
ArithmeticServiceClient.prototype.add = function(i1, i2, callback) {
  if (callback === undefined) {
    this.send_add(i1, i2);
    return this.recv_add();
  } else {
    var postData = this.send_add(i1, i2, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_add);
  }
};

ArithmeticServiceClient.prototype.send_add = function(i1, i2, callback) {
  this.output.writeMessageBegin('add', Thrift.MessageType.CALL, this.seqid);
  var args = new ArithmeticService_add_args();
  args.i1 = i1;
  args.i2 = i2;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ArithmeticServiceClient.prototype.recv_add = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ArithmeticService_add_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'add failed: unknown result';
};
ArithmeticServiceClient.prototype.subtract = function(i1, i2, callback) {
  if (callback === undefined) {
    this.send_subtract(i1, i2);
    return this.recv_subtract();
  } else {
    var postData = this.send_subtract(i1, i2, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_subtract);
  }
};

ArithmeticServiceClient.prototype.send_subtract = function(i1, i2, callback) {
  this.output.writeMessageBegin('subtract', Thrift.MessageType.CALL, this.seqid);
  var args = new ArithmeticService_subtract_args();
  args.i1 = i1;
  args.i2 = i2;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ArithmeticServiceClient.prototype.recv_subtract = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ArithmeticService_subtract_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'subtract failed: unknown result';
};
ArithmeticServiceClient.prototype.multiply = function(i1, i2, callback) {
  if (callback === undefined) {
    this.send_multiply(i1, i2);
    return this.recv_multiply();
  } else {
    var postData = this.send_multiply(i1, i2, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_multiply);
  }
};

ArithmeticServiceClient.prototype.send_multiply = function(i1, i2, callback) {
  this.output.writeMessageBegin('multiply', Thrift.MessageType.CALL, this.seqid);
  var args = new ArithmeticService_multiply_args();
  args.i1 = i1;
  args.i2 = i2;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ArithmeticServiceClient.prototype.recv_multiply = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ArithmeticService_multiply_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'multiply failed: unknown result';
};
ArithmeticServiceClient.prototype.divide = function(i1, i2, callback) {
  if (callback === undefined) {
    this.send_divide(i1, i2);
    return this.recv_divide();
  } else {
    var postData = this.send_divide(i1, i2, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_divide);
  }
};

ArithmeticServiceClient.prototype.send_divide = function(i1, i2, callback) {
  this.output.writeMessageBegin('divide', Thrift.MessageType.CALL, this.seqid);
  var args = new ArithmeticService_divide_args();
  args.i1 = i1;
  args.i2 = i2;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

ArithmeticServiceClient.prototype.recv_divide = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ArithmeticService_divide_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.ex) {
    throw result.ex;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'divide failed: unknown result';
};
