/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package my.example;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Complex implements org.apache.thrift.TBase<Complex, Complex._Fields>, java.io.Serializable, Cloneable, Comparable<Complex> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Complex");

  private static final org.apache.thrift.protocol.TField REAL_FIELD_DESC = new org.apache.thrift.protocol.TField("real", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField IMAGINARY_FIELD_DESC = new org.apache.thrift.protocol.TField("imaginary", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ComplexStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ComplexTupleSchemeFactory());
  }

  public long real; // required
  public long imaginary; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REAL((short)1, "real"),
    IMAGINARY((short)2, "imaginary");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REAL
          return REAL;
        case 2: // IMAGINARY
          return IMAGINARY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REAL_ISSET_ID = 0;
  private static final int __IMAGINARY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REAL, new org.apache.thrift.meta_data.FieldMetaData("real", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "int")));
    tmpMap.put(_Fields.IMAGINARY, new org.apache.thrift.meta_data.FieldMetaData("imaginary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "int")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Complex.class, metaDataMap);
  }

  public Complex() {
  }

  public Complex(
    long real,
    long imaginary)
  {
    this();
    this.real = real;
    setRealIsSet(true);
    this.imaginary = imaginary;
    setImaginaryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Complex(Complex other) {
    __isset_bitfield = other.__isset_bitfield;
    this.real = other.real;
    this.imaginary = other.imaginary;
  }

  public Complex deepCopy() {
    return new Complex(this);
  }

  @Override
  public void clear() {
    setRealIsSet(false);
    this.real = 0;
    setImaginaryIsSet(false);
    this.imaginary = 0;
  }

  public long getReal() {
    return this.real;
  }

  public Complex setReal(long real) {
    this.real = real;
    setRealIsSet(true);
    return this;
  }

  public void unsetReal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REAL_ISSET_ID);
  }

  /** Returns true if field real is set (has been assigned a value) and false otherwise */
  public boolean isSetReal() {
    return EncodingUtils.testBit(__isset_bitfield, __REAL_ISSET_ID);
  }

  public void setRealIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REAL_ISSET_ID, value);
  }

  public long getImaginary() {
    return this.imaginary;
  }

  public Complex setImaginary(long imaginary) {
    this.imaginary = imaginary;
    setImaginaryIsSet(true);
    return this;
  }

  public void unsetImaginary() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMAGINARY_ISSET_ID);
  }

  /** Returns true if field imaginary is set (has been assigned a value) and false otherwise */
  public boolean isSetImaginary() {
    return EncodingUtils.testBit(__isset_bitfield, __IMAGINARY_ISSET_ID);
  }

  public void setImaginaryIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMAGINARY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REAL:
      if (value == null) {
        unsetReal();
      } else {
        setReal((Long)value);
      }
      break;

    case IMAGINARY:
      if (value == null) {
        unsetImaginary();
      } else {
        setImaginary((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REAL:
      return Long.valueOf(getReal());

    case IMAGINARY:
      return Long.valueOf(getImaginary());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REAL:
      return isSetReal();
    case IMAGINARY:
      return isSetImaginary();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Complex)
      return this.equals((Complex)that);
    return false;
  }

  public boolean equals(Complex that) {
    if (that == null)
      return false;

    boolean this_present_real = true;
    boolean that_present_real = true;
    if (this_present_real || that_present_real) {
      if (!(this_present_real && that_present_real))
        return false;
      if (this.real != that.real)
        return false;
    }

    boolean this_present_imaginary = true;
    boolean that_present_imaginary = true;
    if (this_present_imaginary || that_present_imaginary) {
      if (!(this_present_imaginary && that_present_imaginary))
        return false;
      if (this.imaginary != that.imaginary)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Complex other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReal()).compareTo(other.isSetReal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.real, other.real);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImaginary()).compareTo(other.isSetImaginary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImaginary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imaginary, other.imaginary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Complex(");
    boolean first = true;

    sb.append("real:");
    sb.append(this.real);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imaginary:");
    sb.append(this.imaginary);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ComplexStandardSchemeFactory implements SchemeFactory {
    public ComplexStandardScheme getScheme() {
      return new ComplexStandardScheme();
    }
  }

  private static class ComplexStandardScheme extends StandardScheme<Complex> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Complex struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.real = iprot.readI64();
              struct.setRealIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMAGINARY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.imaginary = iprot.readI64();
              struct.setImaginaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Complex struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REAL_FIELD_DESC);
      oprot.writeI64(struct.real);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IMAGINARY_FIELD_DESC);
      oprot.writeI64(struct.imaginary);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ComplexTupleSchemeFactory implements SchemeFactory {
    public ComplexTupleScheme getScheme() {
      return new ComplexTupleScheme();
    }
  }

  private static class ComplexTupleScheme extends TupleScheme<Complex> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Complex struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReal()) {
        optionals.set(0);
      }
      if (struct.isSetImaginary()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetReal()) {
        oprot.writeI64(struct.real);
      }
      if (struct.isSetImaginary()) {
        oprot.writeI64(struct.imaginary);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Complex struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.real = iprot.readI64();
        struct.setRealIsSet(true);
      }
      if (incoming.get(1)) {
        struct.imaginary = iprot.readI64();
        struct.setImaginaryIsSet(true);
      }
    }
  }

}

