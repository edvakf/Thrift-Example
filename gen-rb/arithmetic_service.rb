#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'example_types'

module ArithmeticService
  class Client
    include ::Thrift::Client

    def add(i1, i2)
      send_add(i1, i2)
      return recv_add()
    end

    def send_add(i1, i2)
      send_message('add', Add_args, :i1 => i1, :i2 => i2)
    end

    def recv_add()
      result = receive_message(Add_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add failed: unknown result')
    end

    def subtract(i1, i2)
      send_subtract(i1, i2)
      return recv_subtract()
    end

    def send_subtract(i1, i2)
      send_message('subtract', Subtract_args, :i1 => i1, :i2 => i2)
    end

    def recv_subtract()
      result = receive_message(Subtract_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'subtract failed: unknown result')
    end

    def multiply(i1, i2)
      send_multiply(i1, i2)
      return recv_multiply()
    end

    def send_multiply(i1, i2)
      send_message('multiply', Multiply_args, :i1 => i1, :i2 => i2)
    end

    def recv_multiply()
      result = receive_message(Multiply_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiply failed: unknown result')
    end

    def divide(i1, i2)
      send_divide(i1, i2)
      return recv_divide()
    end

    def send_divide(i1, i2)
      send_message('divide', Divide_args, :i1 => i1, :i2 => i2)
    end

    def recv_divide()
      result = receive_message(Divide_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'divide failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_add(seqid, iprot, oprot)
      args = read_args(iprot, Add_args)
      result = Add_result.new()
      result.success = @handler.add(args.i1, args.i2)
      write_result(result, oprot, 'add', seqid)
    end

    def process_subtract(seqid, iprot, oprot)
      args = read_args(iprot, Subtract_args)
      result = Subtract_result.new()
      result.success = @handler.subtract(args.i1, args.i2)
      write_result(result, oprot, 'subtract', seqid)
    end

    def process_multiply(seqid, iprot, oprot)
      args = read_args(iprot, Multiply_args)
      result = Multiply_result.new()
      result.success = @handler.multiply(args.i1, args.i2)
      write_result(result, oprot, 'multiply', seqid)
    end

    def process_divide(seqid, iprot, oprot)
      args = read_args(iprot, Divide_args)
      result = Divide_result.new()
      result.success = @handler.divide(args.i1, args.i2)
      write_result(result, oprot, 'divide', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Add_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    I1 = 1
    I2 = 2

    FIELDS = {
      I1 => {:type => ::Thrift::Types::STRUCT, :name => 'i1', :class => ::Complex},
      I2 => {:type => ::Thrift::Types::STRUCT, :name => 'i2', :class => ::Complex}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Complex}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Subtract_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    I1 = 1
    I2 = 2

    FIELDS = {
      I1 => {:type => ::Thrift::Types::STRUCT, :name => 'i1', :class => ::Complex},
      I2 => {:type => ::Thrift::Types::STRUCT, :name => 'i2', :class => ::Complex}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Subtract_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Complex}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiply_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    I1 = 1
    I2 = 2

    FIELDS = {
      I1 => {:type => ::Thrift::Types::STRUCT, :name => 'i1', :class => ::Complex},
      I2 => {:type => ::Thrift::Types::STRUCT, :name => 'i2', :class => ::Complex}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiply_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Complex}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Divide_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    I1 = 1
    I2 = 2

    FIELDS = {
      I1 => {:type => ::Thrift::Types::STRUCT, :name => 'i1', :class => ::Complex},
      I2 => {:type => ::Thrift::Types::STRUCT, :name => 'i2', :class => ::Complex}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Divide_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Complex}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

